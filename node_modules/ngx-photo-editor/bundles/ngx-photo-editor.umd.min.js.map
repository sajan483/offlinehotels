{"version":3,"sources":["ng://ngx-photo-editor/lib/ngx-photo-editor.service.ts","ng://ngx-photo-editor/lib/ngx-photo-editor.component.ts","ng://ngx-photo-editor/lib/ngx-photo-editor.module.ts"],"names":["NgxPhotoEditorService","Injectable","args","providedIn","NgxPhotoEditorComponent","modalService","this","prevZoom","modalTitle","hideModalHeader","aspectRatio","autoCropArea","autoCrop","mask","guides","centerIndicator","viewMode","modalCentered","scalable","zoomable","cropBoxMovable","cropBoxResizable","darkTheme","roundCropper","canvasHeight","imageSmoothingEnabled","imageSmoothingQuality","lastUpdate","Date","now","format","quality","isFormatDefined","imageCropped","EventEmitter","imageLoaded","Object","defineProperty","prototype","value","type","test","url","open","base64","imageUrl","split","event","_this","file","target","files","name","reader","FileReader","onload","ev","result","readAsDataURL","onImageLoad","image","addEventListener","document","getElementsByClassName","style","borderRadius","cropper","Cropper","modal","center","rotateRight","rotate","rotateLeft","crop","setDragMode","move","zoom","Number","zoomIn","zoomOut","flipH","scaleX","getImageData","flipV","scaleY","reset","export","cropedImage","resizeToWidth","resizeToHeight","getCroppedCanvas","width","height","outputImage","toDataURL","toBlob","blob","emit","File","content","size","modalSize","centered","backdrop","Component","selector","template","encapsulation","ViewEncapsulation","None","NgbModal","ViewChild","static","Input","Output","NgxPhotoEditorModule","NgModule","declarations","imports","NgbModalModule","CommonModule","exports"],"mappings":"igBAAA,IAAAA,EAAA,WAOE,SAAAA,gCALDC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GCAAC,EAAA,WAsDE,SAAAA,EAAoBC,GAAAC,KAAAD,aAAAA,EApCpBC,KAAAC,SAAW,EAEFD,KAAAE,WAAa,eACbF,KAAAG,iBAAkB,EAClBH,KAAAI,YAAc,EACdJ,KAAAK,aAAe,EACfL,KAAAM,UAAW,EACXN,KAAAO,MAAO,EACPP,KAAAQ,QAAS,EACTR,KAAAS,iBAAkB,EAClBT,KAAAU,SAAqB,EAErBV,KAAAW,eAAgB,EAChBX,KAAAY,UAAW,EACXZ,KAAAa,UAAW,EACXb,KAAAc,gBAAiB,EACjBd,KAAAe,kBAAmB,EACnBf,KAAAgB,WAAY,EACZhB,KAAAiB,cAAe,EACfjB,KAAAkB,aAAe,IAIflB,KAAAmB,uBAAwB,EACxBnB,KAAAoB,sBAA+C,OAExDpB,KAAAqB,WAAaC,KAAKC,MAElBvB,KAAAwB,OAAS,MACTxB,KAAAyB,QAAU,GAEVzB,KAAA0B,iBAAkB,EAER1B,KAAA2B,aAAe,IAAIC,EAAAA,aAC7B5B,KAAA6B,aAAc,EA2KhB,OAtKEC,OAAAC,eAAajC,EAAAkC,UAAA,eAAY,KAAzB,SAA0BC,GACpBA,EAAQ,GAAKA,GAAS,MACxBjC,KAAKyB,QAAUQ,oCAInBH,OAAAC,eAAajC,EAAAkC,UAAA,cAAW,KAAxB,SAAyBE,GACnB,mCAAqCC,KAAKD,KAC5ClC,KAAKwB,OAASU,EACdlC,KAAK0B,iBAAkB,oCAI3BI,OAAAC,eAAajC,EAAAkC,UAAA,WAAQ,KAArB,SAAsBI,GAChBA,IACFpC,KAAKoC,IAAMA,EACPpC,KAAKqB,aAAeC,KAAKC,QAC3BvB,KAAKqC,OACLrC,KAAKqB,WAAaC,KAAKC,yCAK7BO,OAAAC,eAAajC,EAAAkC,UAAA,cAAW,KAAxB,SAAyBM,GACnBA,GAAU,4CAA8CH,KAAKG,KAC/DtC,KAAKuC,SAAWD,EACXtC,KAAK0B,kBACR1B,KAAKwB,OAAWc,EAAOE,MAAM,KAAK,GAAIA,MAAM,KAAK,GAAIA,MAAM,KAAK,GAAGA,MAAM,KAAK,sCAKpFV,OAAAC,eAAajC,EAAAkC,UAAA,oBAAiB,KAA9B,SAA+BS,GAA/B,IAAAC,EAAA1C,KACE,GAAIyC,EAAO,KACHE,EAAOF,EAAMG,OAAOC,MAAM,GAChC,GAAIF,GAAQ,oCAAsCR,KAAKQ,EAAKG,MAAO,CAC5D9C,KAAK0B,kBACR1B,KAAKwB,OAASiB,EAAMG,OAAOC,MAAM,GAAGX,KAAKM,MAAM,KAAK,QAEhDO,EAAS,IAAIC,WACnBD,EAAOE,OAAM,SAAIC,GACfR,EAAKH,SAAWW,EAAGN,OAAOO,QAE5BJ,EAAOK,cAAcX,EAAMG,OAAOC,MAAM,uCAK9Cf,OAAAC,eAAajC,EAAAkC,UAAA,YAAS,KAAtB,SAAuBW,GAAvB,IAAAD,EAAA1C,KACE,GAAI2C,GAAQ,oCAAsCR,KAAKQ,EAAKG,MAAO,CAC5D9C,KAAK0B,kBACR1B,KAAKwB,OAASmB,EAAKT,KAAKM,MAAM,KAAK,QAE/BO,EAAS,IAAIC,WACnBD,EAAOE,OAAM,SAAIC,GACfR,EAAKH,SAAWW,EAAGN,OAAOO,QAE5BJ,EAAOK,cAAcT,qCAIzB7C,EAAAkC,UAAAqB,YAAA,SAAYC,GAAZ,IAAAZ,EAAA1C,KACEsD,EAAMC,iBAAiB,SAAO,WACxBb,EAAKzB,eACNuC,SAASC,uBAAuB,oBAAoB,GAAmBC,MAAMC,aAAe,MAC5FH,SAASC,uBAAuB,gBAAgB,GAAmBC,MAAMC,aAAe,OAE3FjB,EAAKb,aAAc,KAGrB7B,KAAK4D,QAAU,IAAIC,EAAQP,EAAO,CAChClD,YAAaJ,KAAKI,YAClBC,aAAcL,KAAKK,aACnBC,SAAUN,KAAKM,SACfwD,MAAO9D,KAAKO,KACZC,OAAQR,KAAKQ,OACbuD,OAAQ/D,KAAKS,gBACbC,SAAUV,KAAKU,SACfE,SAAUZ,KAAKY,SACfC,SAAUb,KAAKa,SACfC,eAAgBd,KAAKc,eACrBC,iBAAkBf,KAAKe,oBAI3BjB,EAAAkC,UAAAgC,YAAA,WACEhE,KAAK4D,QAAQK,OAAO,KAGtBnE,EAAAkC,UAAAkC,WAAA,WACElE,KAAK4D,QAAQK,QAAQ,KAGvBnE,EAAAkC,UAAAmC,KAAA,WACEnE,KAAK4D,QAAQQ,YAAY,SAG3BtE,EAAAkC,UAAAqC,KAAA,WACErE,KAAK4D,QAAQQ,YAAY,SAG3BtE,EAAAkC,UAAAsC,KAAA,SAAK7B,OACGR,EAAQsC,OAAO9B,EAAMG,OAAOX,OAClCjC,KAAK4D,QAAQU,KAAKrC,EAAQjC,KAAKC,UAC/BD,KAAKC,SAAWgC,GAGlBnC,EAAAkC,UAAAwC,OAAA,WACExE,KAAK4D,QAAQU,KAAK,KAGpBxE,EAAAkC,UAAAyC,QAAA,WACEzE,KAAK4D,QAAQU,MAAM,KAGrBxE,EAAAkC,UAAA0C,MAAA,WACE1E,KAAK4D,QAAQe,QAAQ3E,KAAK4D,QAAQgB,eAAeD,SAGnD7E,EAAAkC,UAAA6C,MAAA,WACE7E,KAAK4D,QAAQkB,QAAQ9E,KAAK4D,QAAQgB,eAAeE,SAGnDhF,EAAAkC,UAAA+C,MAAA,WACE/E,KAAK4D,QAAQmB,SAGfjF,EAAAkC,UAAAgD,OAAA,WAAA,IACMC,EADNvC,EAAA1C,KAGIiF,EADEjF,KAAKkF,eAAiBlF,KAAKmF,eACfnF,KAAK4D,QAAQwB,iBAAiB,CAC1CC,MAAOrF,KAAKkF,cACZ/D,sBAAuBnB,KAAKmB,sBAC5BC,sBAAuBpB,KAAKoB,wBAErBpB,KAAKmF,eACAnF,KAAK4D,QAAQwB,iBAAiB,CAC1CE,OAAQtF,KAAKmF,eACbhE,sBAAuBnB,KAAKmB,sBAC5BC,sBAAuBpB,KAAKoB,wBAErBpB,KAAKkF,cACAlF,KAAK4D,QAAQwB,iBAAiB,CAC1CC,MAAOrF,KAAKkF,cACZ/D,sBAAuBnB,KAAKmB,sBAC5BC,sBAAuBpB,KAAKoB,wBAGhBpB,KAAK4D,QAAQwB,iBAAiB,CAC1CjE,sBAAuBnB,KAAKmB,sBAC5BC,sBAAuBpB,KAAKoB,wBAGhCpB,KAAKuF,YAAcN,EAAYO,UAAU,SAAWxF,KAAKwB,OAAQxB,KAAKyB,SACtEwD,EAAYQ,QAAM,SAACC,GACjBhD,EAAKf,aAAagE,KAAK,CACrBrD,OAAQI,EAAK6C,YACb5C,KAAM,IAAIiD,KAAK,CAACF,GAAOpE,KAAKC,MAAQ,IAAMmB,EAAKlB,OAAQ,CAACU,KAAM,SAAWQ,EAAKlB,aAE/E,SAAWxB,KAAKwB,OAAQxB,KAAKyB,QAAU,KAC1CzB,KAAK6B,aAAc,GAGrB/B,EAAAkC,UAAAK,KAAA,WACErC,KAAKD,aAAasC,KAAKrC,KAAK6F,QAAS,CAACC,KAAM9F,KAAK+F,UAAWC,SAAUhG,KAAKW,cAAesF,SAAU,gCAxNvGC,EAAAA,UAAStG,KAAA,CAAC,CAETuG,SAAU,mBACVC,SAAA,o7JAEAC,cAAeC,EAAAA,kBAAkBC,y8IAR3BC,EAAAA,6CAYLC,EAAAA,UAAS7G,KAAA,CAAC,wBAAyB,CAAC8G,QAAQ,wBAM5CC,EAAAA,+BACAA,EAAAA,2BACAA,EAAAA,4BACAA,EAAAA,wBACAA,EAAAA,oBACAA,EAAAA,sBACAA,EAAAA,+BACAA,EAAAA,wBACAA,EAAAA,yBACAA,EAAAA,6BACAA,EAAAA,wBACAA,EAAAA,wBACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,yBACAA,EAAAA,4BACAA,EAAAA,4BACAA,EAAAA,6BAEAA,EAAAA,8BACAA,EAAAA,qCACAA,EAAAA,qCACAA,EAAAA,4BASAC,EAAAA,6BAMAD,EAAAA,2BAMAA,EAAAA,wBAOAA,EAAAA,2BAUAA,EAAAA,iCASAA,EAAAA,yBAgBAA,EAAAA,SAsHH7G,EA/NA,GCAA,IAAA+G,EAAA,WAMA,SAAAA,KAMA,2BANCC,EAAAA,SAAQlH,KAAA,CAAC,CACRmH,aAAc,CAACjH,GACbkH,QAAS,CAACC,EAAAA,eAAgBC,EAAAA,cAC5BC,QAAS,CAACrH,OAGZ+G,EAZA","sourcesContent":["import {Injectable} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxPhotoEditorService {\n\n  constructor() {\n  }\n}\n","import {AfterViewInit, Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation} from '@angular/core';\r\nimport Cropper from 'cropperjs';\r\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\r\nimport ViewMode = Cropper.ViewMode;\r\n\r\n@Component({\r\n  // tslint:disable-next-line:component-selector\r\n  selector: 'ngx-photo-editor',\r\n  templateUrl: './ngx-photo-editor.component.html',\r\n  styleUrls: ['./ngx-photo-editor.component.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxPhotoEditorComponent {\r\n\r\n  @ViewChild('ngxPhotoEditorContent', {static: false}) content;\r\n\r\n  public cropper: Cropper;\r\n  public outputImage: string;\r\n  prevZoom = 0;\r\n\r\n  @Input() modalTitle = 'Photo Editor';\r\n  @Input() hideModalHeader = false;\r\n  @Input() aspectRatio = 1;\r\n  @Input() autoCropArea = 1;\r\n  @Input() autoCrop = true;\r\n  @Input() mask = true;\r\n  @Input() guides = true;\r\n  @Input() centerIndicator = true;\r\n  @Input() viewMode: ViewMode = 0;\r\n  @Input() modalSize: size;\r\n  @Input() modalCentered = false;\r\n  @Input() scalable = true;\r\n  @Input() zoomable = true;\r\n  @Input() cropBoxMovable = true;\r\n  @Input() cropBoxResizable = true;\r\n  @Input() darkTheme = true;\r\n  @Input() roundCropper = false;\r\n  @Input() canvasHeight = 400;\r\n\r\n  @Input() resizeToWidth: number;\r\n  @Input() resizeToHeight: number;\r\n  @Input() imageSmoothingEnabled = true;\r\n  @Input() imageSmoothingQuality: ImageSmoothingQuality = 'high';\r\n  url: string;\r\n  lastUpdate = Date.now();\r\n\r\n  format = 'png';\r\n  quality = 92;\r\n\r\n  isFormatDefined = false;\r\n\r\n  @Output() imageCropped = new EventEmitter<CroppedEvent>();\r\n  imageLoaded = false;\r\n\r\n  constructor(private modalService: NgbModal) {\r\n  }\r\n\r\n  @Input() set imageQuality(value: number) {\r\n    if (value > 0 && value <= 100) {\r\n      this.quality = value;\r\n    }\r\n  }\r\n\r\n  @Input() set imageFormat(type: imageFormat) {\r\n    if ((/^(gif|jpe?g|tiff|png|webp|bmp)$/i).test(type)) {\r\n      this.format = type;\r\n      this.isFormatDefined = true;\r\n    }\r\n  }\r\n\r\n  @Input() set imageUrl(url: string) {\r\n    if (url) {\r\n      this.url = url;\r\n      if (this.lastUpdate !== Date.now()) {\r\n        this.open();\r\n        this.lastUpdate = Date.now();\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() set imageBase64(base64: string) {\r\n    if (base64 && (/^data:image\\/([a-zA-Z]*);base64,([^\\\"]*)$/).test(base64)) {\r\n      this.imageUrl = base64;\r\n      if (!this.isFormatDefined) {\r\n        this.format = ((base64.split(',')[0]).split(';')[0]).split(':')[1].split('/')[1];\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() set imageChangedEvent(event: any) {\r\n    if (event) {\r\n      const file = event.target.files[0];\r\n      if (file && (/\\.(gif|jpe?g|tiff|png|webp|bmp)$/i).test(file.name)) {\r\n        if (!this.isFormatDefined) {\r\n          this.format = event.target.files[0].type.split('/')[1];\r\n        }\r\n        const reader = new FileReader();\r\n        reader.onload = (ev: any) => {\r\n          this.imageUrl = ev.target.result;\r\n        };\r\n        reader.readAsDataURL(event.target.files[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  @Input() set imageFile(file: File) {\r\n    if (file && (/\\.(gif|jpe?g|tiff|png|webp|bmp)$/i).test(file.name)) {\r\n      if (!this.isFormatDefined) {\r\n        this.format = file.type.split('/')[1];\r\n      }\r\n      const reader = new FileReader();\r\n      reader.onload = (ev: any) => {\r\n        this.imageUrl = ev.target.result;\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  }\r\n\r\n  onImageLoad(image) {\r\n    image.addEventListener('ready', () => {\r\n      if (this.roundCropper) {\r\n        (document.getElementsByClassName('cropper-view-box')[0] as HTMLElement).style.borderRadius = '50%';\r\n        (document.getElementsByClassName('cropper-face')[0] as HTMLElement).style.borderRadius = '50%';\r\n      }\r\n      this.imageLoaded = true;\r\n    });\r\n\r\n    this.cropper = new Cropper(image, {\r\n      aspectRatio: this.aspectRatio,\r\n      autoCropArea: this.autoCropArea,\r\n      autoCrop: this.autoCrop,\r\n      modal: this.mask, // black mask\r\n      guides: this.guides, // grid\r\n      center: this.centerIndicator, // center indicator\r\n      viewMode: this.viewMode,\r\n      scalable: this.scalable,\r\n      zoomable: this.zoomable,\r\n      cropBoxMovable: this.cropBoxMovable,\r\n      cropBoxResizable: this.cropBoxResizable,\r\n    });\r\n  }\r\n\r\n  rotateRight() {\r\n    this.cropper.rotate(45);\r\n  }\r\n\r\n  rotateLeft() {\r\n    this.cropper.rotate(-45);\r\n  }\r\n\r\n  crop() {\r\n    this.cropper.setDragMode('crop');\r\n  }\r\n\r\n  move() {\r\n    this.cropper.setDragMode('move');\r\n  }\r\n\r\n  zoom(event) {\r\n    const value = Number(event.target.value);\r\n    this.cropper.zoom(value - this.prevZoom);\r\n    this.prevZoom = value;\r\n  }\r\n\r\n  zoomIn() {\r\n    this.cropper.zoom(0.1);\r\n  }\r\n\r\n  zoomOut() {\r\n    this.cropper.zoom(-0.1);\r\n  }\r\n\r\n  flipH() {\r\n    this.cropper.scaleX(-this.cropper.getImageData().scaleX);\r\n  }\r\n\r\n  flipV() {\r\n    this.cropper.scaleY(-this.cropper.getImageData().scaleY);\r\n  }\r\n\r\n  reset() {\r\n    this.cropper.reset();\r\n  }\r\n\r\n  export() {\r\n    let cropedImage;\r\n    if (this.resizeToWidth && this.resizeToHeight) {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        width: this.resizeToWidth,\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    } else if (this.resizeToHeight) {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        height: this.resizeToHeight,\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    } else if (this.resizeToWidth) {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        width: this.resizeToWidth,\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    } else {\r\n      cropedImage = this.cropper.getCroppedCanvas({\r\n        imageSmoothingEnabled: this.imageSmoothingEnabled,\r\n        imageSmoothingQuality: this.imageSmoothingQuality\r\n      });\r\n    }\r\n    this.outputImage = cropedImage.toDataURL('image/' + this.format, this.quality);\r\n    cropedImage.toBlob(blob => {\r\n      this.imageCropped.emit({\r\n        base64: this.outputImage,\r\n        file: new File([blob], Date.now() + '.' + this.format, {type: 'image/' + this.format})\r\n      });\r\n    }, 'image/' + this.format, this.quality / 100);\r\n    this.imageLoaded = false;\r\n  }\r\n\r\n  open() {\r\n    this.modalService.open(this.content, {size: this.modalSize, centered: this.modalCentered, backdrop: 'static'});\r\n  }\r\n}\r\n\r\nexport interface CroppedEvent {\r\n  base64?: string;\r\n  file?: File;\r\n}\r\n\r\nexport type imageFormat = 'gif' | 'jpeg' | 'tiff' | 'png' | 'webp' | 'bmp';\r\n\r\nexport type size = 'sm' | 'lg' | 'xl' | string;\r\n","import {NgModule} from '@angular/core';\nimport {NgxPhotoEditorComponent} from './ngx-photo-editor.component';\nimport {NgbModalModule} from '@ng-bootstrap/ng-bootstrap';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  declarations: [NgxPhotoEditorComponent],\n    imports: [NgbModalModule, CommonModule],\n  exports: [NgxPhotoEditorComponent],\n})\nexport class NgxPhotoEditorModule {\n}\n"]}