import { NgModule, Optional, PLATFORM_ID, SkipSelf } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { SegmentService } from './ngx-segment-analytics.service';
import { SEGMENT_CONFIG } from './ngx-segment-analytics.config';
import { WindowWrapper } from './window-wrapper';
/**
 * Window Provider for Angular AOT
 * @returns Browser Window instance
 */
export function getWindow(platformId) {
    return isPlatformBrowser(platformId) ? window : {};
}
/**
 * Segment Module
 */
export class SegmentModule {
    /**
     * Segment Module Constructor
     *
     * @param parentModule Must be null
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error('SegmentModule is already loaded. Import it in the AppModule only');
        }
    }
    /**
     * Segment Module Initialisation
     *
     * @param config Segment Configuration
     * @returns Segment Module
     */
    static forRoot(config) {
        return {
            ngModule: SegmentModule,
            providers: [
                { provide: SEGMENT_CONFIG, useValue: config },
                SegmentService,
            ],
        };
    }
}
SegmentModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                providers: [
                    { provide: WindowWrapper, useFactory: getWindow, deps: [PLATFORM_ID] },
                ]
            },] }
];
SegmentModule.ctorParameters = () => [
    { type: SegmentModule, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXNlZ21lbnQtYW5hbHl0aWNzLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9uZ3gtc2VnbWVudC1hbmFseXRpY3MubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBc0IsUUFBUSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBQyxZQUFZLEVBQUUsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFDLGNBQWMsRUFBZ0IsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM3RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFL0M7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxVQUFlO0lBQ3JDLE9BQU8saUJBQWlCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3ZELENBQUM7QUFFRDs7R0FFRztBQU9ILE1BQU0sT0FBTyxhQUFhO0lBa0J0Qjs7OztPQUlHO0lBQ0gsWUFBb0MsWUFBMkI7UUFDM0QsSUFBSSxZQUFZLEVBQUU7WUFDZCxNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7U0FDdkY7SUFDTCxDQUFDO0lBekJEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFzQjtRQUN4QyxPQUFPO1lBQ0gsUUFBUSxFQUFFLGFBQWE7WUFDdkIsU0FBUyxFQUFFO2dCQUNQLEVBQUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFDO2dCQUMzQyxjQUFjO2FBQ2pCO1NBQ0osQ0FBQztJQUNOLENBQUM7OztZQXRCSixRQUFRLFNBQUM7Z0JBQ04sT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2dCQUN2QixTQUFTLEVBQUU7b0JBQ1AsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUM7aUJBQ3ZFO2FBQ0o7OztZQXdCcUQsYUFBYSx1QkFBbEQsUUFBUSxZQUFJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLCBPcHRpb25hbCwgUExBVEZPUk1fSUQsIFNraXBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29tbW9uTW9kdWxlLCBpc1BsYXRmb3JtQnJvd3Nlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7U2VnbWVudFNlcnZpY2V9IGZyb20gJy4vbmd4LXNlZ21lbnQtYW5hbHl0aWNzLnNlcnZpY2UnO1xuaW1wb3J0IHtTRUdNRU5UX0NPTkZJRywgU2VnbWVudENvbmZpZ30gZnJvbSAnLi9uZ3gtc2VnbWVudC1hbmFseXRpY3MuY29uZmlnJztcbmltcG9ydCB7V2luZG93V3JhcHBlcn0gZnJvbSAnLi93aW5kb3ctd3JhcHBlcic7XG5cbi8qKlxuICogV2luZG93IFByb3ZpZGVyIGZvciBBbmd1bGFyIEFPVFxuICogQHJldHVybnMgQnJvd3NlciBXaW5kb3cgaW5zdGFuY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFdpbmRvdyhwbGF0Zm9ybUlkOiBhbnkpIHtcbiAgICByZXR1cm4gaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkgPyB3aW5kb3cgOiB7fTtcbn1cblxuLyoqXG4gKiBTZWdtZW50IE1vZHVsZVxuICovXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7cHJvdmlkZTogV2luZG93V3JhcHBlciwgdXNlRmFjdG9yeTogZ2V0V2luZG93LCBkZXBzOiBbUExBVEZPUk1fSURdfSxcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIFNlZ21lbnRNb2R1bGUge1xuXG4gICAgLyoqXG4gICAgICogU2VnbWVudCBNb2R1bGUgSW5pdGlhbGlzYXRpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWcgU2VnbWVudCBDb25maWd1cmF0aW9uXG4gICAgICogQHJldHVybnMgU2VnbWVudCBNb2R1bGVcbiAgICAgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZvclJvb3QoY29uZmlnPzogU2VnbWVudENvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8U2VnbWVudE1vZHVsZT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IFNlZ21lbnRNb2R1bGUsXG4gICAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgICAgICB7cHJvdmlkZTogU0VHTUVOVF9DT05GSUcsIHVzZVZhbHVlOiBjb25maWd9LFxuICAgICAgICAgICAgICAgIFNlZ21lbnRTZXJ2aWNlLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWdtZW50IE1vZHVsZSBDb25zdHJ1Y3RvclxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmVudE1vZHVsZSBNdXN0IGJlIG51bGxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBwYXJlbnRNb2R1bGU6IFNlZ21lbnRNb2R1bGUpIHtcbiAgICAgICAgaWYgKHBhcmVudE1vZHVsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWdtZW50TW9kdWxlIGlzIGFscmVhZHkgbG9hZGVkLiBJbXBvcnQgaXQgaW4gdGhlIEFwcE1vZHVsZSBvbmx5Jyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=