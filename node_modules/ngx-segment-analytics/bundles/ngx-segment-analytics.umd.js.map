{"version":3,"file":"ngx-segment-analytics.umd.js","sources":["../../src/ngx-segment-analytics.config.ts","../../src/window-wrapper.ts","../../src/ngx-segment-analytics.service.ts","../../src/ngx-segment-analytics.module.ts","../../src/ngx-segment-analytics.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\n\n/**\n * Segment Configuration Interface\n */\nexport interface SegmentConfig {\n    /** API Key for Segment.io */\n    apiKey?: string;\n    /** Debug mode status */\n    debug?: boolean;\n    /** Load Segment configuration on initialization */\n    loadOnInitialization?: boolean;\n    /** Segment Host if requests are proxied **/\n    segmentHost?: string;\n    /** Segment Custom URI **/\n    segmentUri?: string;\n}\n\n/** Segment Configuration Injection Token */\nexport const SEGMENT_CONFIG: InjectionToken<SegmentConfig> = new InjectionToken<SegmentConfig>('ngx-segment-analytics.config');\n\nexport const DEFAULT_CONFIG: SegmentConfig = {\n    debug: false,\n    loadOnInitialization: true, // Compatibility < 1.2.5\n    segmentHost: 'cdn.segment.com',\n    segmentUri: '/analytics.js/v1/$API_KEY$/analytics.min.js',\n};\n","import {Injectable} from '@angular/core';\n\n/**\n * Window Wrapper for Angular AOT\n */\n@Injectable()\nexport class WindowWrapper {\n    /** Segment Analytics.js instance */\n    public analytics: any;\n}\n","import {Inject, Injectable} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {DEFAULT_CONFIG, SEGMENT_CONFIG, SegmentConfig} from './ngx-segment-analytics.config';\nimport {WindowWrapper} from './window-wrapper';\n\nexport interface SegmentPlugin {\n    // Video Plugins\n    new(player: any, accessToken: string): any;\n\n    // Others plugins\n    new(): any;\n}\n\nexport type SegmentMiddleware = ({integrations, payload, next}) => void;\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class SegmentService {\n\n    private readonly _config: SegmentConfig;\n\n    /**\n     * @param _w Browser window\n     * @param _doc Browser DOM\n     * @param userConfig Segment configuration\n     */\n    constructor(\n        @Inject(WindowWrapper) private _w: WindowWrapper,\n        @Inject(DOCUMENT) private _doc: any,\n        @Inject(SEGMENT_CONFIG) userConfig: SegmentConfig\n    ) {\n        this._config = {...DEFAULT_CONFIG, ...userConfig};\n\n        if (this._config.loadOnInitialization && (typeof this._config.apiKey === 'undefined' || this._config.apiKey === '')) {\n            console.error('The API Key cannot be an empty string if Segment must be loaded on initialization.');\n            return;\n        }\n\n        if (\n            typeof this._w.analytics === 'undefined'\n            || typeof this._w.analytics.initialize === 'undefined'\n            || this._w.analytics.initialize === false\n        ) {\n            if (typeof this._w.analytics !== 'undefined' && this._w.analytics.invoked === true) {\n                console.error('Segment snippet included twice.');\n                return;\n            }\n\n            if (this._config.debug) {\n                console.log('Segment initialization...');\n            }\n\n            this._w.analytics = [];\n            this._w.analytics.invoked = true;\n\n            this._w.analytics.methods = [\n                'trackSubmit',\n                'trackClick',\n                'trackLink',\n                'trackForm',\n                'pageview',\n                'identify',\n                'reset',\n                'group',\n                'track',\n                'ready',\n                'alias',\n                'debug',\n                'page',\n                'once',\n                'off',\n                'on',\n                'addSourceMiddleware',\n                'addIntegrationMiddleware',\n                'setAnonymousId',\n                'addDestinationMiddleware',\n            ];\n\n            this._w.analytics.factory = (method: string) => {\n                return (...args) => {\n                    args.unshift(method);\n                    this._w.analytics.push(args);\n                    return this._w.analytics;\n                };\n            };\n\n            this._w.analytics.methods.forEach((method: string) => {\n                this._w.analytics[method] = this._w.analytics.factory(method);\n            });\n\n            this._w.analytics.load = (key: string, options: { integrations: { [key: string]: boolean } }) => {\n                const script = this._doc.createElement('script');\n                script.type = 'text/javascript';\n                script.async = true;\n                script.src = 'https://' + this._config.segmentHost + this._config.segmentUri.replace('$API_KEY$', key);\n\n                const first = this._doc.getElementsByTagName('script')[0];\n                first.parentNode.insertBefore(script, first);\n                this._w.analytics._loadOptions = options;\n            };\n\n            this._w.analytics._writeKey = this._config.apiKey;\n            this._w.analytics.SNIPPET_VERSION = '4.13.2';\n            if (this._config.loadOnInitialization) {\n                this.load(this._config.apiKey);\n            }\n        }\n    }\n\n    /**\n     * Load Segment configuration.\n     *\n     * @param apiKey Write API Key\n     * @param options Optional parameters\n     */\n    public load(apiKey: string, options?: any): void {\n        this._w.analytics.load(apiKey, options);\n        if (this._config.debug) {\n            console.log('Segment initialized');\n        }\n        this.debug(this._config.debug);\n    }\n\n    /**\n     * The identify method is how you associate your users and their actions to a recognizable userId and traits.\n     *\n     * @param userId The database ID for the user.\n     * @param traits A dictionary of traits you know about the user, like their email or name\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    public identify(userId?: string, traits?: any, options?: any): Promise<SegmentService> {\n        return new Promise((resolve) => {\n            this._w.analytics.identify(userId, traits, options, _ => resolve(this));\n        });\n    }\n\n    /**\n     * The track method lets you record any actions your users perform.\n     *\n     * @param event The name of the event you’re tracking.\n     * @param properties A dictionary of properties for the event.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    public track(event: string, properties?: any, options?: any): Promise<SegmentService> {\n        return new Promise((resolve) => {\n            this._w.analytics.track(event, properties, options, _ => resolve(this));\n        });\n    }\n\n    /**\n     * The page method lets you record page views on your website, along with optional extra information about the page being viewed.\n     *\n     * @param name The name of the page.\n     * @param properties A dictionary of properties of the page.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    public page(name?: string, properties?: any, options?: any): Promise<SegmentService>;\n\n    /**\n     * The page method lets you record page views on your website, along with optional extra information about the page being viewed.\n     *\n     * @param category The category of the page.\n     * @param name The name of the page.\n     * @param properties A dictionary of properties of the page.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    public page(category: string, name: string, properties?: any, options?: any): Promise<SegmentService>;\n\n    /**\n     * The page method lets you record page views on your website, along with optional extra information about the page being viewed.\n     *\n     * @param category The category of the page.\n     * @param name The name of the page.\n     * @param properties A dictionary of properties of the page.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    public page(category?: string, name?: string, properties?: any, options?: any): Promise<SegmentService> {\n        return new Promise((resolve) => {\n            this._w.analytics.page(category, name, properties, options, _ => resolve(this));\n        });\n    }\n\n    /**\n     * The group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon,\n     * assemblage, cluster, troop, gang, party, society or any other name you came up with for the same concept.\n     *\n     * @param groupId The Group ID to associate with the current user.\n     * @param traits A dictionary of traits for the group.\n     *\n     * @returns\n     */\n    public group(groupId: string, traits?: any): Promise<SegmentService> {\n        return new Promise((resolve) => {\n            this._w.analytics.group(groupId, traits, _ => resolve(this));\n        });\n    }\n\n    /**\n     * The alias method combines two previously unassociated user identities.\n     *\n     * @param userId The new user ID you want to associate with the user.\n     * @param previousId The previous ID that the user was recognized by. This defaults to the currently identified user’s ID.\n     * @param options A dictionary of options.\n     *\n     * @returns\n     */\n    public alias(userId: string, previousId?: string, options?: any): Promise<SegmentService> {\n        return new Promise((resolve) => {\n            this._w.analytics.alias(userId, previousId, options, _ => resolve(this));\n        });\n    }\n\n    /**\n     * The ready method allows you execute a promise that will be called as soon as all of your enabled destinations have loaded\n     * and analytics.js has completed initialization.\n     *\n     * @returns\n     */\n    public ready(): Promise<SegmentService> {\n        return new Promise((resolve) => {\n            this._w.analytics.ready(_ => resolve(this));\n        });\n    }\n\n    /**\n     * Return informations about the currently identified user\n     *\n     * @returns Informations about the currently identified user\n     */\n    public user(): any {\n        return this._w.analytics.user();\n    }\n\n    /**\n     * Return identifier about the currently identified user\n     *\n     * @returns Identifier about the currently identified user\n     */\n    public id(): string | null {\n        return this._w.analytics.id();\n    }\n\n    /**\n     * Override the default Anonymous ID\n     *\n     * @param anonymousId New anonymous ID\n     */\n    public setAnonymousId(anonymousId: string): void {\n        this._w.analytics.setAnonymousId(anonymousId);\n    }\n\n    /**\n     * Return traits about the currently identified user\n     *\n     * @returns Traits about the currently identified user\n     */\n    public traits(): any {\n        return this._w.analytics.user().traits();\n    }\n\n    /**\n     * Reset the id, including anonymousId, and clear traits for the currently identified user and group.\n     */\n    public reset(): void {\n        this._w.analytics.reset();\n    }\n\n    /**\n     * Turn on/off debug mode, logging helpful messages to the console.\n     *\n     * @param enabled Enable or not the debug mode\n     */\n    public debug(enabled?: boolean): void {\n        this._w.analytics.debug(enabled);\n    }\n\n    /**\n     * Set listeners for these events and run your own custom code.\n     *\n     * @param method Name of the method to listen for\n     * @param callback A function to execute after each the emitted method\n     */\n    public on(method: string, callback: (event?: string, properties?: any, options?: any) => any): void {\n        this._w.analytics.on(method, callback);\n    }\n\n    /**\n     * Attaches the `track` call as a handler to a link\n     *\n     * @param elements DOM element or an array of DOM elements to be bound with track method.\n     * @param event The name of the event, passed to the `track` method or a function that returns a string to be used\n     *              as the name of the track event.\n     * @param properties A dictionary of properties to pass with the `track` method.\n     */\n    public trackLink(elements: HTMLElement | HTMLElement[], event: string | Function, properties?: any | Function): void {\n        this._w.analytics.trackLink(elements, event, properties);\n    }\n\n    /**\n     * Binds a `track` call to a form submission.\n     *\n     * @param forms The form element to track or an array of form\n     * @param event The name of the event, passed to the `track` method.\n     * @param properties A dictionary of properties to pass with the `track` method.\n     */\n    public trackForm(forms: HTMLElement | HTMLElement[], event: string | Function, properties?: any | Function): void {\n        this._w.analytics.trackForm(forms, event, properties);\n    }\n\n    /**\n     * Set the length (in milliseconds) of the callbacks and helper functions\n     *\n     * @param timeout Number of milliseconds\n     */\n    public timeout(timeout: number): void {\n        this._w.analytics.timeout(timeout);\n    }\n\n    /**\n     * Add a source middleware called on events\n     *\n     * @param middleware Custom function\n     */\n    public addSourceMiddleware(middleware: SegmentMiddleware): void {\n        this._w.analytics.addSourceMiddleware(middleware);\n    }\n\n    /**\n     * Add a destination middleware called on events\n     *\n     * @param integration Integration name\n     * @param middlewares Custom functions\n     */\n    public addDestinationMiddleware(integration: string, middlewares: SegmentMiddleware[]): void {\n        this._w.analytics.addDestinationMiddleware(integration, middlewares);\n    }\n\n    public get plugins(): { [pluginName: string]: SegmentPlugin } {\n        return this._w.analytics.plugins;\n    }\n}\n","import {ModuleWithProviders, NgModule, Optional, PLATFORM_ID, SkipSelf} from '@angular/core';\nimport {CommonModule, isPlatformBrowser} from '@angular/common';\nimport {SegmentService} from './ngx-segment-analytics.service';\nimport {SEGMENT_CONFIG, SegmentConfig} from './ngx-segment-analytics.config';\nimport {WindowWrapper} from './window-wrapper';\n\n/**\n * Window Provider for Angular AOT\n * @returns Browser Window instance\n */\nexport function getWindow(platformId: any) {\n    return isPlatformBrowser(platformId) ? window : {};\n}\n\n/**\n * Segment Module\n */\n@NgModule({\n    imports: [CommonModule],\n    providers: [\n        {provide: WindowWrapper, useFactory: getWindow, deps: [PLATFORM_ID]},\n    ]\n})\nexport class SegmentModule {\n\n    /**\n     * Segment Module Initialisation\n     *\n     * @param config Segment Configuration\n     * @returns Segment Module\n     */\n    public static forRoot(config?: SegmentConfig): ModuleWithProviders<SegmentModule> {\n        return {\n            ngModule: SegmentModule,\n            providers: [\n                {provide: SEGMENT_CONFIG, useValue: config},\n                SegmentService,\n            ],\n        };\n    }\n\n    /**\n     * Segment Module Constructor\n     *\n     * @param parentModule Must be null\n     */\n    constructor(@Optional() @SkipSelf() parentModule: SegmentModule) {\n        if (parentModule) {\n            throw new Error('SegmentModule is already loaded. Import it in the AppModule only');\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["InjectionToken","Injectable","Inject","DOCUMENT","isPlatformBrowser","NgModule","CommonModule","PLATFORM_ID","Optional","SkipSelf"],"mappings":"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"}