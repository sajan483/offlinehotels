(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-segment-analytics', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-segment-analytics'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, i0, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    /** Segment Configuration Injection Token */
    var SEGMENT_CONFIG = new i0.InjectionToken('ngx-segment-analytics.config');
    var DEFAULT_CONFIG = {
        debug: false,
        loadOnInitialization: true,
        segmentHost: 'cdn.segment.com',
        segmentUri: '/analytics.js/v1/$API_KEY$/analytics.min.js',
    };

    /**
     * Window Wrapper for Angular AOT
     */
    var WindowWrapper = /** @class */ (function () {
        function WindowWrapper() {
        }
        return WindowWrapper;
    }());
    WindowWrapper.decorators = [
        { type: i0.Injectable }
    ];

    var SegmentService = /** @class */ (function () {
        /**
         * @param _w Browser window
         * @param _doc Browser DOM
         * @param userConfig Segment configuration
         */
        function SegmentService(_w, _doc, userConfig) {
            var _this = this;
            this._w = _w;
            this._doc = _doc;
            this._config = Object.assign(Object.assign({}, DEFAULT_CONFIG), userConfig);
            if (this._config.loadOnInitialization && (typeof this._config.apiKey === 'undefined' || this._config.apiKey === '')) {
                console.error('The API Key cannot be an empty string if Segment must be loaded on initialization.');
                return;
            }
            if (typeof this._w.analytics === 'undefined'
                || typeof this._w.analytics.initialize === 'undefined'
                || this._w.analytics.initialize === false) {
                if (typeof this._w.analytics !== 'undefined' && this._w.analytics.invoked === true) {
                    console.error('Segment snippet included twice.');
                    return;
                }
                if (this._config.debug) {
                    console.log('Segment initialization...');
                }
                this._w.analytics = [];
                this._w.analytics.invoked = true;
                this._w.analytics.methods = [
                    'trackSubmit',
                    'trackClick',
                    'trackLink',
                    'trackForm',
                    'pageview',
                    'identify',
                    'reset',
                    'group',
                    'track',
                    'ready',
                    'alias',
                    'debug',
                    'page',
                    'once',
                    'off',
                    'on',
                    'addSourceMiddleware',
                    'addIntegrationMiddleware',
                    'setAnonymousId',
                    'addDestinationMiddleware',
                ];
                this._w.analytics.factory = function (method) {
                    return function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        args.unshift(method);
                        _this._w.analytics.push(args);
                        return _this._w.analytics;
                    };
                };
                this._w.analytics.methods.forEach(function (method) {
                    _this._w.analytics[method] = _this._w.analytics.factory(method);
                });
                this._w.analytics.load = function (key, options) {
                    var script = _this._doc.createElement('script');
                    script.type = 'text/javascript';
                    script.async = true;
                    script.src = 'https://' + _this._config.segmentHost + _this._config.segmentUri.replace('$API_KEY$', key);
                    var first = _this._doc.getElementsByTagName('script')[0];
                    first.parentNode.insertBefore(script, first);
                    _this._w.analytics._loadOptions = options;
                };
                this._w.analytics._writeKey = this._config.apiKey;
                this._w.analytics.SNIPPET_VERSION = '4.13.2';
                if (this._config.loadOnInitialization) {
                    this.load(this._config.apiKey);
                }
            }
        }
        /**
         * Load Segment configuration.
         *
         * @param apiKey Write API Key
         * @param options Optional parameters
         */
        SegmentService.prototype.load = function (apiKey, options) {
            this._w.analytics.load(apiKey, options);
            if (this._config.debug) {
                console.log('Segment initialized');
            }
            this.debug(this._config.debug);
        };
        /**
         * The identify method is how you associate your users and their actions to a recognizable userId and traits.
         *
         * @param userId The database ID for the user.
         * @param traits A dictionary of traits you know about the user, like their email or name
         * @param options A dictionary of options.
         *
         * @returns
         */
        SegmentService.prototype.identify = function (userId, traits, options) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._w.analytics.identify(userId, traits, options, function (_) { return resolve(_this); });
            });
        };
        /**
         * The track method lets you record any actions your users perform.
         *
         * @param event The name of the event you’re tracking.
         * @param properties A dictionary of properties for the event.
         * @param options A dictionary of options.
         *
         * @returns
         */
        SegmentService.prototype.track = function (event, properties, options) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._w.analytics.track(event, properties, options, function (_) { return resolve(_this); });
            });
        };
        /**
         * The page method lets you record page views on your website, along with optional extra information about the page being viewed.
         *
         * @param category The category of the page.
         * @param name The name of the page.
         * @param properties A dictionary of properties of the page.
         * @param options A dictionary of options.
         *
         * @returns
         */
        SegmentService.prototype.page = function (category, name, properties, options) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._w.analytics.page(category, name, properties, options, function (_) { return resolve(_this); });
            });
        };
        /**
         * The group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon,
         * assemblage, cluster, troop, gang, party, society or any other name you came up with for the same concept.
         *
         * @param groupId The Group ID to associate with the current user.
         * @param traits A dictionary of traits for the group.
         *
         * @returns
         */
        SegmentService.prototype.group = function (groupId, traits) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._w.analytics.group(groupId, traits, function (_) { return resolve(_this); });
            });
        };
        /**
         * The alias method combines two previously unassociated user identities.
         *
         * @param userId The new user ID you want to associate with the user.
         * @param previousId The previous ID that the user was recognized by. This defaults to the currently identified user’s ID.
         * @param options A dictionary of options.
         *
         * @returns
         */
        SegmentService.prototype.alias = function (userId, previousId, options) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._w.analytics.alias(userId, previousId, options, function (_) { return resolve(_this); });
            });
        };
        /**
         * The ready method allows you execute a promise that will be called as soon as all of your enabled destinations have loaded
         * and analytics.js has completed initialization.
         *
         * @returns
         */
        SegmentService.prototype.ready = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this._w.analytics.ready(function (_) { return resolve(_this); });
            });
        };
        /**
         * Return informations about the currently identified user
         *
         * @returns Informations about the currently identified user
         */
        SegmentService.prototype.user = function () {
            return this._w.analytics.user();
        };
        /**
         * Return identifier about the currently identified user
         *
         * @returns Identifier about the currently identified user
         */
        SegmentService.prototype.id = function () {
            return this._w.analytics.id();
        };
        /**
         * Override the default Anonymous ID
         *
         * @param anonymousId New anonymous ID
         */
        SegmentService.prototype.setAnonymousId = function (anonymousId) {
            this._w.analytics.setAnonymousId(anonymousId);
        };
        /**
         * Return traits about the currently identified user
         *
         * @returns Traits about the currently identified user
         */
        SegmentService.prototype.traits = function () {
            return this._w.analytics.user().traits();
        };
        /**
         * Reset the id, including anonymousId, and clear traits for the currently identified user and group.
         */
        SegmentService.prototype.reset = function () {
            this._w.analytics.reset();
        };
        /**
         * Turn on/off debug mode, logging helpful messages to the console.
         *
         * @param enabled Enable or not the debug mode
         */
        SegmentService.prototype.debug = function (enabled) {
            this._w.analytics.debug(enabled);
        };
        /**
         * Set listeners for these events and run your own custom code.
         *
         * @param method Name of the method to listen for
         * @param callback A function to execute after each the emitted method
         */
        SegmentService.prototype.on = function (method, callback) {
            this._w.analytics.on(method, callback);
        };
        /**
         * Attaches the `track` call as a handler to a link
         *
         * @param elements DOM element or an array of DOM elements to be bound with track method.
         * @param event The name of the event, passed to the `track` method or a function that returns a string to be used
         *              as the name of the track event.
         * @param properties A dictionary of properties to pass with the `track` method.
         */
        SegmentService.prototype.trackLink = function (elements, event, properties) {
            this._w.analytics.trackLink(elements, event, properties);
        };
        /**
         * Binds a `track` call to a form submission.
         *
         * @param forms The form element to track or an array of form
         * @param event The name of the event, passed to the `track` method.
         * @param properties A dictionary of properties to pass with the `track` method.
         */
        SegmentService.prototype.trackForm = function (forms, event, properties) {
            this._w.analytics.trackForm(forms, event, properties);
        };
        /**
         * Set the length (in milliseconds) of the callbacks and helper functions
         *
         * @param timeout Number of milliseconds
         */
        SegmentService.prototype.timeout = function (timeout) {
            this._w.analytics.timeout(timeout);
        };
        /**
         * Add a source middleware called on events
         *
         * @param middleware Custom function
         */
        SegmentService.prototype.addSourceMiddleware = function (middleware) {
            this._w.analytics.addSourceMiddleware(middleware);
        };
        /**
         * Add a destination middleware called on events
         *
         * @param integration Integration name
         * @param middlewares Custom functions
         */
        SegmentService.prototype.addDestinationMiddleware = function (integration, middlewares) {
            this._w.analytics.addDestinationMiddleware(integration, middlewares);
        };
        Object.defineProperty(SegmentService.prototype, "plugins", {
            get: function () {
                return this._w.analytics.plugins;
            },
            enumerable: false,
            configurable: true
        });
        return SegmentService;
    }());
    SegmentService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function SegmentService_Factory() { return new SegmentService(i0__namespace.ɵɵinject(WindowWrapper), i0__namespace.ɵɵinject(i2__namespace.DOCUMENT), i0__namespace.ɵɵinject(SEGMENT_CONFIG)); }, token: SegmentService, providedIn: "root" });
    SegmentService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    SegmentService.ctorParameters = function () { return [
        { type: WindowWrapper, decorators: [{ type: i0.Inject, args: [WindowWrapper,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [SEGMENT_CONFIG,] }] }
    ]; };

    /**
     * Window Provider for Angular AOT
     * @returns Browser Window instance
     */
    function getWindow(platformId) {
        return i2.isPlatformBrowser(platformId) ? window : {};
    }
    /**
     * Segment Module
     */
    var SegmentModule = /** @class */ (function () {
        /**
         * Segment Module Constructor
         *
         * @param parentModule Must be null
         */
        function SegmentModule(parentModule) {
            if (parentModule) {
                throw new Error('SegmentModule is already loaded. Import it in the AppModule only');
            }
        }
        /**
         * Segment Module Initialisation
         *
         * @param config Segment Configuration
         * @returns Segment Module
         */
        SegmentModule.forRoot = function (config) {
            return {
                ngModule: SegmentModule,
                providers: [
                    { provide: SEGMENT_CONFIG, useValue: config },
                    SegmentService,
                ],
            };
        };
        return SegmentModule;
    }());
    SegmentModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i2.CommonModule],
                    providers: [
                        { provide: WindowWrapper, useFactory: getWindow, deps: [i0.PLATFORM_ID] },
                    ]
                },] }
    ];
    SegmentModule.ctorParameters = function () { return [
        { type: SegmentModule, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] }
    ]; };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DEFAULT_CONFIG = DEFAULT_CONFIG;
    exports.SEGMENT_CONFIG = SEGMENT_CONFIG;
    exports.SegmentModule = SegmentModule;
    exports.SegmentService = SegmentService;
    exports.WindowWrapper = WindowWrapper;
    exports.getWindow = getWindow;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-segment-analytics.umd.js.map
