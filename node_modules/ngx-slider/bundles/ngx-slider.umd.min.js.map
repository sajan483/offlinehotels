{"version":3,"file":"ngx-slider.umd.min.js","sources":["~/ngx-slider/src/app/slider/slider.component.ts","~/ngx-slider/src/app/slider/slider.module.ts","~/ngx-slider/src/app/slider/class/config.ts","~/ngx-slider/src/app/slider/class/slider.ts"],"sourcesContent":["import { Component, OnInit, Input, HostListener, ElementRef } from '@angular/core';\nimport { Slider } from './class/slider';\nimport { ISliderConfig } from './interface/slider-config';\nimport { ISlide } from './interface/slide';\nexport class SliderComponent implements OnInit {\n\n   init: Slider;\npublic sliderItems: Array<ISlide>;\npublic config: ISliderConfig;\npublic componentWidth: number;\npublic currentItemIndex: number;\npublic activeTitle: string;\npublic sliderStyle: any;\npublic slideStyle: any;\n/**\n * @param {?} el\n */\nconstructor(\npublic el: ElementRef\n  ) {\n    this.currentItemIndex = 0;\n    this.activeTitle = '';\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.sliderItems = this.init.items;\n    this.config = this.init.config;\n    this.setTitle();\n    this.resize();\n    this.setSliderStyle();\n  }\n/**\n * @return {?}\n */\nonResize() {\n    this.resize();\n  }\n/**\n * @return {?}\n */\nprivate resize() {\n    this.componentWidth = this.el.nativeElement.parentElement.clientWidth - (this.getPreviewWidth() * this.getNumberOfPreview());\n    this.setSlideStyle();\n  }\n/**\n * @return {?}\n */\nprivate setSliderStyle(): void {\n    const /** @type {?} */ width = `${this.getWrapperWidth()}px`;\n    const /** @type {?} */ left = this.getWrapperLeft() ? `-${this.getWrapperLeft() - this.getPreviewWidth()}px` : 0;\n\n    this.sliderStyle = {\n      width: width,\n      left: left,\n      transition: `left ${this.config.transitionDuration}s`\n    };\n  }\n/**\n * @return {?}\n */\nprivate setSlideStyle(): void {\n    this.slideStyle = {\n      width: `${this.componentWidth}px`\n    };\n  }\n/**\n * @return {?}\n */\nprivate setTitle(): void {\n    this.activeTitle =\n      this.sliderItems.length ? this.sliderItems[this.currentItemIndex].title : '';\n  }\n/**\n * @return {?}\n */\nprivate getNumberOfPreview(): number {\n    return this.config.showPreview ? this.config.numberOfPreview : 0;\n  }\n/**\n * @return {?}\n */\nprivate getPreviewWidth(): number {\n    return this.config.showPreview ? this.config.previewWidth : 0;\n  }\n/**\n * @return {?}\n */\nprivate getWrapperWidth(): number {\n    return this.sliderItems.length ? this.sliderItems.length * this.componentWidth : this.componentWidth;\n  }\n/**\n * @return {?}\n */\nprivate getWrapperLeft(): number {\n    return this.currentItemIndex * this.componentWidth;\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nprivate goTo(action: any): void {\n    if (action === 'next') {\n      if (this.sliderItems.length - 1 > this.currentItemIndex) {\n        this.currentItemIndex++;\n      } else {\n        this.currentItemIndex = this.config.loop ? 0 : this.currentItemIndex;\n      }\n    } else if (action === 'previous') {\n      if (this.currentItemIndex > 0) {\n        this.currentItemIndex--;\n      } else {\n        this.currentItemIndex = this.config.loop ? this.sliderItems.length - 1 : this.currentItemIndex;\n      }\n    } else {\n      this.currentItemIndex = action;\n    }\n    this.setSliderStyle();\n    this.setTitle();\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-slider',\n  template: `\n    <h4 *ngIf=\"config.showTitle\" class=\"slide-title\" [innerHTML]=\"activeTitle\"></h4>\n    <div class=\"slider-container\">\n      <div class=\"slider-row\">\n        <div [ngStyle]=\"sliderStyle\" class=\"slide-wrapper\">\n          <div *ngFor=\"let slide of sliderItems; let i=index;\" \n               [class.active]=\"i === currentItemIndex\"\n               [ngStyle]=\"slideStyle\" \n               class=\"slide-item\">\n               <div [ngStyle]=\"{'background-image': 'url(' + slide.src + ')'}\" class=\"slide\"></div>\n          </div>\n        </div>\n      </div>\n      <ng-container *ngIf=\"sliderItems.length > 1 && config.showNavigator\">\n          <button (click)=\"goTo('next')\" class=\"slider-nav next\">\n              <i class=\"fa fa-chevron-right\" aria-hidden=\"true\"></i>\n            </button>\n            <button (click)=\"goTo('previous')\" class=\"slider-nav previous\">\n              <i class=\"fa fa-chevron-left\" aria-hidden=\"true\"></i>\n            </button>\n      </ng-container>\n      <div *ngIf=\"sliderItems.length > 1 && config.showDots\" class=\"slider-dots\">\n        <ul>\n          <li *ngFor=\"let slide of sliderItems; let i=index;\" [class.active]=\"i === currentItemIndex\">\n            <button (click)=\"goTo(i)\" class=\"dots\">\n              <i class=\"fa fa-circle\" aria-hidden=\"true\"></i>\n            </button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .slider-container {\n        width: 100%;\n        height: 100%;\n        position: relative;\n        overflow: hidden;\n    }\n    .slider-row {\n        width: 100%;\n        height: 100%;\n    }\n    .slide-wrapper {\n        position: absolute;\n        height: 100%;\n    }\n    .slide-wrapper .active {\n        opacity: 1;\n        -webkit-transition: opacity 1s, -webkit-transform 1s;\n        transition: opacity 1s, -webkit-transform 1s;\n        transition: opacity 1s, transform 1s;\n        transition: opacity 1s, transform 1s, -webkit-transform 1s;\n    }\n    .slide-item {\n        display: inline-block;\n        height: 100%;\n        opacity: 0.5;\n        -webkit-transition: opacity 1s, -webkit-transform 1s;\n        transition: opacity 1s, -webkit-transform 1s;\n        transition: opacity 1s, transform 1s;\n        transition: opacity 1s, transform 1s, -webkit-transform 1s;\n    }\n    .slide {\n        height: 100%;\n        background-repeat: no-repeat;\n        background-size: auto;\n        background-position: center;\n        margin: 0 5px;\n    }\n    .slide-title {\n        font-size: 1.5rem;\n        padding: 10px;\n    }\n    .slider-nav {\n        background-color: rgba(0,0,0,0.2);\n        position: absolute;\n        top: 35%;\n        border: none;\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        color: white;\n        font-size: 2rem;\n        padding: 1.5rem;\n    }\n\n    .next {\n        right: 0;\n    }\n\n    .previous {\n        left: 0;\n    }\n\n    .slider-dots {\n        position: absolute;\n        bottom: 3%;\n        width: 100%;\n        text-align: center;\n    }\n\n    .slider-dots ul {\n        margin: 0;\n        padding: 0;\n    }\n\n    .slider-dots ul li {\n        display: inline-block;\n        list-style: none;\n        margin: 0 3px;\n    } \n\n    .slider-dots ul li.active i {\n        color: #00C24F;\n    }\n\n    .dots {\n        padding: 0;\n        border: 0;\n        -webkit-box-shadow: none;\n                box-shadow: none;\n        background: none;\n    }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'init': [{ type: Input },],\n'onResize': [{ type: HostListener, args: ['window:resize', ['$event.target'], ] },],\n};\n}\n\nfunction SliderComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderComponent.ctorParameters;\n/** @type {?} */\nSliderComponent.propDecorators;\n/** @type {?} */\nSliderComponent.prototype.init;\n/** @type {?} */\nSliderComponent.prototype.sliderItems;\n/** @type {?} */\nSliderComponent.prototype.config;\n/** @type {?} */\nSliderComponent.prototype.componentWidth;\n/** @type {?} */\nSliderComponent.prototype.currentItemIndex;\n/** @type {?} */\nSliderComponent.prototype.activeTitle;\n/** @type {?} */\nSliderComponent.prototype.sliderStyle;\n/** @type {?} */\nSliderComponent.prototype.slideStyle;\n/** @type {?} */\nSliderComponent.prototype.el;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SliderComponent } from './slider.component';\nexport class SliderModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    SliderComponent\n  ],\n  exports: [\n    SliderComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction SliderModule_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSliderModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class SliderConfig {\n    showDots: boolean;\n    showNavigator: boolean;\n    showTitle: boolean;\n    loop: boolean;\n    showPreview: boolean;\n    numberOfPreview: number;\n    previewWidth: number;\n    transitionDuration: number;\nconstructor() {\n        this.showDots = true;\n        this.showNavigator = true;\n        this.showTitle = true;\n        this.loop = true;\n        this.showPreview = true;\n        this.numberOfPreview = 2;\n        this.previewWidth = 50;\n        this.transitionDuration = 1;\n    }\n}\n\nfunction SliderConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nSliderConfig.prototype.showDots;\n/** @type {?} */\nSliderConfig.prototype.showNavigator;\n/** @type {?} */\nSliderConfig.prototype.showTitle;\n/** @type {?} */\nSliderConfig.prototype.loop;\n/** @type {?} */\nSliderConfig.prototype.showPreview;\n/** @type {?} */\nSliderConfig.prototype.numberOfPreview;\n/** @type {?} */\nSliderConfig.prototype.previewWidth;\n/** @type {?} */\nSliderConfig.prototype.transitionDuration;\n}\n\n","import { ISlide } from '../interface/slide';\nimport { ISliderConfig } from '../interface/slider-config';\nimport { Slide } from './slide';\nimport { SliderConfig } from './config';\nexport class Slider {\n    items: Array<ISlide> = [];\n    config: ISliderConfig = new SliderConfig();\nconstructor() {}\n}\n\nfunction Slider_tsickle_Closure_declarations() {\n/** @type {?} */\nSlider.prototype.items;\n/** @type {?} */\nSlider.prototype.config;\n}\n\n\n"],"names":["SliderComponent","el","this","currentItemIndex","activeTitle","prototype","ngOnInit","sliderItems","init","items","config","setTitle","resize","setSliderStyle","onResize","componentWidth","nativeElement","parentElement","clientWidth","getPreviewWidth","getNumberOfPreview","setSlideStyle","width","getWrapperWidth","left","getWrapperLeft","sliderStyle","transition","transitionDuration","slideStyle","length","title","showPreview","numberOfPreview","previewWidth","goTo","action","loop","decorators","type","Component","args","selector","template","styles","ctorParameters","ElementRef","propDecorators","Input","HostListener","SliderModule","NgModule","imports","CommonModule","declarations","exports","SliderConfig","showDots","showNavigator","showTitle","Slider"],"mappings":"gTAIA,IAAAA,EAAA,WAaA,SAAAA,EAEWC,GAAAC,KAAXD,GAAWA,EACPC,KAAKC,iBAAmB,EACxBD,KAAKE,YAAc,UAKvBJ,EAAAK,UAAAC,SAAA,WACIJ,KADKK,YAAcL,KAAKM,KAAKC,MAE7BP,KADKQ,OAASR,KAAKM,KAAKE,OAExBR,KADKS,WAELT,KADKU,SAELV,KADKW,kBAMTb,EAAAK,UAAAS,SAAA,WACIZ,KAFKU,UAGNZ,EAAHK,UAAAO,OAAG,WAKCV,KAJKa,eAAiBb,KAAKD,GAAGe,cAAcC,cAAcC,YAAchB,KAAMiB,kBAAoBjB,KAAKkB,qBAKvGlB,KAJKmB,iBAGNrB,EAAHK,UAAAQ,eAAG,WAOC,IANMS,EAAQpB,KAAQqB,kBAM1B,KALUC,EAAOtB,KAAKuB,iBAAmB,KAAAvB,KAASuB,iBAAmBvB,KAAKiB,mBAM1E,KANkG,EAQ9FjB,KANKwB,aAOHJ,MANOA,EAOPE,KANMA,EAONG,WANY,QAAAzB,KAAaQ,OAAOkB,mBAMtC,MAFG5B,EAAHK,UAAAgB,cAAG,WASCnB,KARK2B,YASHP,MAROpB,KAAQa,eAQrB,OAJGf,EAAHK,UAAAM,SAAG,WAWCT,KAVKE,YAWHF,KAVKK,YAAYuB,OAAS5B,KAAKK,YAAYL,KAAKC,kBAAkB4B,MAAQ,IAG7E/B,EAAHK,UAAAe,mBAAG,WAaC,OAZOlB,KAAKQ,OAAOsB,YAAc9B,KAAKQ,OAAOuB,gBAAkB,GAGhEjC,EAAHK,UAAAc,gBAAG,WAeC,OAdOjB,KAAKQ,OAAOsB,YAAc9B,KAAKQ,OAAOwB,aAAe,GAG7DlC,EAAHK,UAAAkB,gBAAG,WAiBC,OAhBOrB,KAAKK,YAAYuB,OAAS5B,KAAKK,YAAYuB,OAAS5B,KAAKa,eAAiBb,KAAKa,gBAGvFf,EAAHK,UAAAoB,eAAG,WAmBC,OAlBOvB,KAAKC,iBAAmBD,KAAKa,gBAGrCf,EAAHK,UAAA8B,KAAG,SAAAC,GACgB,SAqBXA,EACElC,KArBKK,YAAYuB,OAAS,EAAI5B,KAAKC,iBAsBrCD,KArBKC,mBAuBLD,KArBKC,iBAAmBD,KAAKQ,OAAO2B,KAAO,EAAInC,KAAKC,iBAElC,aAAfiC,EAsBDlC,KArBKC,iBAAmB,EAsB1BD,KArBKC,mBAuBLD,KArBKC,iBAAmBD,KAAKQ,OAAO2B,KAAOnC,KAAKK,YAAYuB,OAAS,EAAI5B,KAAKC,iBAwBhFD,KArBKC,iBAAmBiC,EAuB1BlC,KArBKW,iBAsBLX,KArBKS,cA9FT,GAiGOX,EAAPsC,aACEC,KAAMC,EAAAA,UAAWC,OAuBjBC,SArBU,aAsBVC,SArBU,63CAqDVC,QArBQ,yjEA+FT5C,EAAD6C,eAAC,WAAA,QAwBAN,KAAMO,EAAAA,cArBA9C,EAAP+C,gBAwBAvC,OAvBW+B,KAAMS,EAAAA,QAwBjBlC,WAvBeyB,KAAMU,EAAAA,aAAcR,MAAM,iBAAkB,qBC1O3D,IAAAS,EAAA,kBAAA,aAAA,GAEmCA,EAAnCZ,aACEC,KAAMY,EAAAA,SAAUV,OADhBW,SACEC,EAAAA,cAEFC,cACEtD,GAEFuD,SACEvD,OAOHkD,EAADL,eAAC,WAAA,UClBD,IAAAW,EAAA,WAmBA,OAVA,WACQtD,KAAKuD,UAAW,EAChBvD,KAAKwD,eAAgB,EACrBxD,KAAKyD,WAAY,EACjBzD,KAAKmC,MAAO,EACZnC,KAAK8B,aAAc,EACnB9B,KAAK+B,gBAAkB,EACvB/B,KAAKgC,aAAe,GACpBhC,KAAK0B,mBAAqB,GAjBlC,GCGAgC,EAAA,WAIA,OADA,WAFI1D,KAAJO,SACIP,KAAJQ,OAC4B,IAAI8C,GAHhC"}
