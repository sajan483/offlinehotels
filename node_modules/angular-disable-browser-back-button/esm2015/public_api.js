import * as tslib_1 from "tslib";
var BackButtonDisableModule_1;
import { NgModule, Injectable, Inject } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
function _window() {
    return window;
}
let WindowRef = class WindowRef {
    get nativeWindow() {
        return _window();
    }
};
WindowRef = tslib_1.__decorate([
    Injectable()
], WindowRef);
export { WindowRef };
let BackButtonDisableModule = BackButtonDisableModule_1 = class BackButtonDisableModule {
    constructor(router, windowRef, preserveScrollPosition) {
        this.router = router;
        this.windowRef = windowRef;
        this.preserveScrollPosition = preserveScrollPosition;
        this.scrollX = 0;
        this.scrollY = 0;
        this.window = this.windowRef.nativeWindow;
        this.disableBackButton();
        this.addPopStateEventListener();
    }
    static forRoot(config) {
        return {
            ngModule: BackButtonDisableModule_1,
            providers: [
                {
                    provide: 'preserveScrollPosition',
                    useValue: config && 'preserveScrollPosition' in config ? config.preserveScrollPosition : false
                }
            ]
        };
    }
    addPopStateEventListener() {
        this.window.addEventListener('popstate', () => {
            if (this.preserveScrollPosition)
                this.getScrollCoordinates();
            this.window.history.pushState(null, null, null);
            if (this.preserveScrollPosition)
                setTimeout(this.scrollToThePreviousPosition.bind(this));
        });
    }
    scrollToThePreviousPosition() {
        this.window.scrollTo(this.scrollX, this.scrollY);
    }
    getScrollCoordinates() {
        this.scrollX = this.window.scrollX;
        this.scrollY = this.window.scrollY;
    }
    disableBackButton() {
        this.window.history.pushState(null, null, null);
        this.router.events.subscribe(event => {
            if (event instanceof NavigationEnd) {
                this.window.history.pushState(null, null, null);
            }
            ;
        });
    }
};
BackButtonDisableModule.ctorParameters = () => [
    { type: Router },
    { type: WindowRef },
    { type: Boolean, decorators: [{ type: Inject, args: ['preserveScrollPosition',] }] }
];
BackButtonDisableModule = BackButtonDisableModule_1 = tslib_1.__decorate([
    NgModule({
        providers: [WindowRef]
    }),
    tslib_1.__param(2, Inject('preserveScrollPosition'))
], BackButtonDisableModule);
export { BackButtonDisableModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZGlzYWJsZS1icm93c2VyLWJhY2stYnV0dG9uLyIsInNvdXJjZXMiOlsicHVibGljX2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUF1QixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV4RCxTQUFTLE9BQU87SUFDZCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBR0QsSUFBYSxTQUFTLEdBQXRCLE1BQWEsU0FBUztJQUNwQixJQUFJLFlBQVk7UUFDZCxPQUFPLE9BQU8sRUFBRSxDQUFDO0lBQ25CLENBQUM7Q0FDRixDQUFBO0FBSlksU0FBUztJQURyQixVQUFVLEVBQUU7R0FDQSxTQUFTLENBSXJCO1NBSlksU0FBUztBQVN0QixJQUFhLHVCQUF1QiwrQkFBcEMsTUFBYSx1QkFBdUI7SUFNbEMsWUFDVSxNQUFjLEVBQ2QsU0FBb0IsRUFDYyxzQkFBK0I7UUFGakUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFDYywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQVM7UUFObkUsWUFBTyxHQUFHLENBQUMsQ0FBQztRQUNaLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFPbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQTtRQUN6QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUE0QztRQUN6RCxPQUFPO1lBQ0wsUUFBUSxFQUFFLHlCQUF1QjtZQUNqQyxTQUFTLEVBQUU7Z0JBQ1Q7b0JBQ0UsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSxFQUFFLE1BQU0sSUFBSSx3QkFBd0IsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsS0FBSztpQkFDL0Y7YUFDRjtTQUNGLENBQUE7SUFDSCxDQUFDO0lBRU8sd0JBQXdCO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtZQUM1QyxJQUFJLElBQUksQ0FBQyxzQkFBc0I7Z0JBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7WUFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEQsSUFBSSxJQUFJLENBQUMsc0JBQXNCO2dCQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDM0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sMkJBQTJCO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyxvQkFBb0I7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ25DLElBQUksS0FBSyxZQUFZLGFBQWEsRUFBRTtnQkFDbEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDakQ7WUFBQSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTs7WUE5Q21CLE1BQU07WUFDSCxTQUFTOzBDQUMzQixNQUFNLFNBQUMsd0JBQXdCOztBQVR2Qix1QkFBdUI7SUFIbkMsUUFBUSxDQUFDO1FBQ1IsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDO0tBQ3ZCLENBQUM7SUFVRyxtQkFBQSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtHQVR4Qix1QkFBdUIsQ0FxRG5DO1NBckRZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3RhYmxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgTmF2aWdhdGlvbkVuZCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmZ1bmN0aW9uIF93aW5kb3coKTogYW55IHtcbiAgcmV0dXJuIHdpbmRvdztcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFdpbmRvd1JlZiB7XG4gIGdldCBuYXRpdmVXaW5kb3coKTogYW55IHtcbiAgICByZXR1cm4gX3dpbmRvdygpO1xuICB9XG59XG5cbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1dpbmRvd1JlZl1cbn0pXG5leHBvcnQgY2xhc3MgQmFja0J1dHRvbkRpc2FibGVNb2R1bGUge1xuXG4gIHByaXZhdGUgd2luZG93OiBXaW5kb3c7XG4gIHByaXZhdGUgc2Nyb2xsWCA9IDA7XG4gIHByaXZhdGUgc2Nyb2xsWSA9IDA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIHdpbmRvd1JlZjogV2luZG93UmVmLFxuICAgIEBJbmplY3QoJ3ByZXNlcnZlU2Nyb2xsUG9zaXRpb24nKSBwcml2YXRlIHByZXNlcnZlU2Nyb2xsUG9zaXRpb246IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy53aW5kb3cgPSB0aGlzLndpbmRvd1JlZi5uYXRpdmVXaW5kb3dcbiAgICB0aGlzLmRpc2FibGVCYWNrQnV0dG9uKCk7XG4gICAgdGhpcy5hZGRQb3BTdGF0ZUV2ZW50TGlzdGVuZXIoKTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZz86IHsgcHJlc2VydmVTY3JvbGxQb3NpdGlvbjogYm9vbGVhbiB9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBCYWNrQnV0dG9uRGlzYWJsZU1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogJ3ByZXNlcnZlU2Nyb2xsUG9zaXRpb24nLFxuICAgICAgICAgIHVzZVZhbHVlOiBjb25maWcgJiYgJ3ByZXNlcnZlU2Nyb2xsUG9zaXRpb24nIGluIGNvbmZpZyA/IGNvbmZpZy5wcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uIDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgXVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkUG9wU3RhdGVFdmVudExpc3RlbmVyKCk6IHZvaWQge1xuICAgIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMucHJlc2VydmVTY3JvbGxQb3NpdGlvbikgdGhpcy5nZXRTY3JvbGxDb29yZGluYXRlcygpO1xuICAgICAgdGhpcy53aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICBpZiAodGhpcy5wcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uKSBzZXRUaW1lb3V0KHRoaXMuc2Nyb2xsVG9UaGVQcmV2aW91c1Bvc2l0aW9uLmJpbmQodGhpcykpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBzY3JvbGxUb1RoZVByZXZpb3VzUG9zaXRpb24oKTogdm9pZCB7XG4gICAgdGhpcy53aW5kb3cuc2Nyb2xsVG8odGhpcy5zY3JvbGxYLCB0aGlzLnNjcm9sbFkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTY3JvbGxDb29yZGluYXRlcygpOiB2b2lkIHtcbiAgICB0aGlzLnNjcm9sbFggPSB0aGlzLndpbmRvdy5zY3JvbGxYO1xuICAgIHRoaXMuc2Nyb2xsWSA9IHRoaXMud2luZG93LnNjcm9sbFk7XG4gIH1cblxuICBwcml2YXRlIGRpc2FibGVCYWNrQnV0dG9uKCk6IHZvaWQge1xuICAgIHRoaXMud2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIG51bGwpO1xuICAgIHRoaXMucm91dGVyLmV2ZW50cy5zdWJzY3JpYmUoZXZlbnQgPT4ge1xuICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgTmF2aWdhdGlvbkVuZCkge1xuICAgICAgICB0aGlzLndpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBudWxsKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==