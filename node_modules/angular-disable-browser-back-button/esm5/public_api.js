import * as tslib_1 from "tslib";
import { NgModule, Injectable, Inject } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
function _window() {
    return window;
}
var WindowRef = /** @class */ (function () {
    function WindowRef() {
    }
    Object.defineProperty(WindowRef.prototype, "nativeWindow", {
        get: function () {
            return _window();
        },
        enumerable: true,
        configurable: true
    });
    WindowRef = tslib_1.__decorate([
        Injectable()
    ], WindowRef);
    return WindowRef;
}());
export { WindowRef };
var BackButtonDisableModule = /** @class */ (function () {
    function BackButtonDisableModule(router, windowRef, preserveScrollPosition) {
        this.router = router;
        this.windowRef = windowRef;
        this.preserveScrollPosition = preserveScrollPosition;
        this.scrollX = 0;
        this.scrollY = 0;
        this.window = this.windowRef.nativeWindow;
        this.disableBackButton();
        this.addPopStateEventListener();
    }
    BackButtonDisableModule_1 = BackButtonDisableModule;
    BackButtonDisableModule.forRoot = function (config) {
        return {
            ngModule: BackButtonDisableModule_1,
            providers: [
                {
                    provide: 'preserveScrollPosition',
                    useValue: config && 'preserveScrollPosition' in config ? config.preserveScrollPosition : false
                }
            ]
        };
    };
    BackButtonDisableModule.prototype.addPopStateEventListener = function () {
        var _this = this;
        this.window.addEventListener('popstate', function () {
            if (_this.preserveScrollPosition)
                _this.getScrollCoordinates();
            _this.window.history.pushState(null, null, null);
            if (_this.preserveScrollPosition)
                setTimeout(_this.scrollToThePreviousPosition.bind(_this));
        });
    };
    BackButtonDisableModule.prototype.scrollToThePreviousPosition = function () {
        this.window.scrollTo(this.scrollX, this.scrollY);
    };
    BackButtonDisableModule.prototype.getScrollCoordinates = function () {
        this.scrollX = this.window.scrollX;
        this.scrollY = this.window.scrollY;
    };
    BackButtonDisableModule.prototype.disableBackButton = function () {
        var _this = this;
        this.window.history.pushState(null, null, null);
        this.router.events.subscribe(function (event) {
            if (event instanceof NavigationEnd) {
                _this.window.history.pushState(null, null, null);
            }
            ;
        });
    };
    var BackButtonDisableModule_1;
    BackButtonDisableModule.ctorParameters = function () { return [
        { type: Router },
        { type: WindowRef },
        { type: Boolean, decorators: [{ type: Inject, args: ['preserveScrollPosition',] }] }
    ]; };
    BackButtonDisableModule = BackButtonDisableModule_1 = tslib_1.__decorate([
        NgModule({
            providers: [WindowRef]
        }),
        tslib_1.__param(2, Inject('preserveScrollPosition'))
    ], BackButtonDisableModule);
    return BackButtonDisableModule;
}());
export { BackButtonDisableModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItZGlzYWJsZS1icm93c2VyLWJhY2stYnV0dG9uLyIsInNvdXJjZXMiOlsicHVibGljX2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQXVCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRixPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXhELFNBQVMsT0FBTztJQUNkLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFHRDtJQUFBO0lBSUEsQ0FBQztJQUhDLHNCQUFJLG1DQUFZO2FBQWhCO1lBQ0UsT0FBTyxPQUFPLEVBQUUsQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUhVLFNBQVM7UUFEckIsVUFBVSxFQUFFO09BQ0EsU0FBUyxDQUlyQjtJQUFELGdCQUFDO0NBQUEsQUFKRCxJQUlDO1NBSlksU0FBUztBQVN0QjtJQU1FLGlDQUNVLE1BQWMsRUFDZCxTQUFvQixFQUNjLHNCQUErQjtRQUZqRSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsY0FBUyxHQUFULFNBQVMsQ0FBVztRQUNjLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBUztRQU5uRSxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ1osWUFBTyxHQUFHLENBQUMsQ0FBQztRQU9sQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFBO1FBQ3pDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Z0NBZFUsdUJBQXVCO0lBZ0IzQiwrQkFBTyxHQUFkLFVBQWUsTUFBNEM7UUFDekQsT0FBTztZQUNMLFFBQVEsRUFBRSx5QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSx3QkFBd0I7b0JBQ2pDLFFBQVEsRUFBRSxNQUFNLElBQUksd0JBQXdCLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEtBQUs7aUJBQy9GO2FBQ0Y7U0FDRixDQUFBO0lBQ0gsQ0FBQztJQUVPLDBEQUF3QixHQUFoQztRQUFBLGlCQU1DO1FBTEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUU7WUFDdkMsSUFBSSxLQUFJLENBQUMsc0JBQXNCO2dCQUFFLEtBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO1lBQzdELEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2hELElBQUksS0FBSSxDQUFDLHNCQUFzQjtnQkFBRSxVQUFVLENBQUMsS0FBSSxDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzNGLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLDZEQUEyQixHQUFuQztRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyxzREFBb0IsR0FBNUI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7SUFDckMsQ0FBQztJQUVPLG1EQUFpQixHQUF6QjtRQUFBLGlCQU9DO1FBTkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQUEsS0FBSztZQUNoQyxJQUFJLEtBQUssWUFBWSxhQUFhLEVBQUU7Z0JBQ2xDLEtBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2pEO1lBQUEsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7O2dCQTdDaUIsTUFBTTtnQkFDSCxTQUFTOzhDQUMzQixNQUFNLFNBQUMsd0JBQXdCOztJQVR2Qix1QkFBdUI7UUFIbkMsUUFBUSxDQUFDO1lBQ1IsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDO1NBQ3ZCLENBQUM7UUFVRyxtQkFBQSxNQUFNLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtPQVR4Qix1QkFBdUIsQ0FxRG5DO0lBQUQsOEJBQUM7Q0FBQSxBQXJERCxJQXFEQztTQXJEWSx1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgSW5qZWN0YWJsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIE5hdmlnYXRpb25FbmQgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfd2luZG93KCk6IGFueSB7XG4gIHJldHVybiB3aW5kb3c7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXaW5kb3dSZWYge1xuICBnZXQgbmF0aXZlV2luZG93KCk6IGFueSB7XG4gICAgcmV0dXJuIF93aW5kb3coKTtcbiAgfVxufVxuXG5ATmdNb2R1bGUoe1xuICBwcm92aWRlcnM6IFtXaW5kb3dSZWZdXG59KVxuZXhwb3J0IGNsYXNzIEJhY2tCdXR0b25EaXNhYmxlTW9kdWxlIHtcblxuICBwcml2YXRlIHdpbmRvdzogV2luZG93O1xuICBwcml2YXRlIHNjcm9sbFggPSAwO1xuICBwcml2YXRlIHNjcm9sbFkgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJpdmF0ZSB3aW5kb3dSZWY6IFdpbmRvd1JlZixcbiAgICBASW5qZWN0KCdwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uJykgcHJpdmF0ZSBwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uOiBib29sZWFuXG4gICkge1xuICAgIHRoaXMud2luZG93ID0gdGhpcy53aW5kb3dSZWYubmF0aXZlV2luZG93XG4gICAgdGhpcy5kaXNhYmxlQmFja0J1dHRvbigpO1xuICAgIHRoaXMuYWRkUG9wU3RhdGVFdmVudExpc3RlbmVyKCk7XG4gIH1cblxuICBzdGF0aWMgZm9yUm9vdChjb25maWc/OiB7IHByZXNlcnZlU2Nyb2xsUG9zaXRpb246IGJvb2xlYW4gfSk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQmFja0J1dHRvbkRpc2FibGVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6ICdwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uJyxcbiAgICAgICAgICB1c2VWYWx1ZTogY29uZmlnICYmICdwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uJyBpbiBjb25maWcgPyBjb25maWcucHJlc2VydmVTY3JvbGxQb3NpdGlvbiA6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFkZFBvcFN0YXRlRXZlbnRMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICB0aGlzLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsICgpID0+IHtcbiAgICAgIGlmICh0aGlzLnByZXNlcnZlU2Nyb2xsUG9zaXRpb24pIHRoaXMuZ2V0U2Nyb2xsQ29vcmRpbmF0ZXMoKTtcbiAgICAgIHRoaXMud2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKG51bGwsIG51bGwsIG51bGwpO1xuICAgICAgaWYgKHRoaXMucHJlc2VydmVTY3JvbGxQb3NpdGlvbikgc2V0VGltZW91dCh0aGlzLnNjcm9sbFRvVGhlUHJldmlvdXNQb3NpdGlvbi5iaW5kKHRoaXMpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2Nyb2xsVG9UaGVQcmV2aW91c1Bvc2l0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMud2luZG93LnNjcm9sbFRvKHRoaXMuc2Nyb2xsWCwgdGhpcy5zY3JvbGxZKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2Nyb2xsQ29vcmRpbmF0ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5zY3JvbGxYID0gdGhpcy53aW5kb3cuc2Nyb2xsWDtcbiAgICB0aGlzLnNjcm9sbFkgPSB0aGlzLndpbmRvdy5zY3JvbGxZO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNhYmxlQmFja0J1dHRvbigpOiB2b2lkIHtcbiAgICB0aGlzLndpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZShudWxsLCBudWxsLCBudWxsKTtcbiAgICB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKGV2ZW50ID0+IHtcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpIHtcbiAgICAgICAgdGhpcy53aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4iXX0=