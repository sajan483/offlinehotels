var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Directive, ViewContainerRef, TemplateRef, Input } from '@angular/core';
import { reaction } from 'mobx';
import { MobxAutorunDirective } from './mobx-autorun.directive';
var MobxReactionDirective = /** @class */ (function (_super) {
    __extends(MobxReactionDirective, _super);
    function MobxReactionDirective(templateRef, viewContainer) {
        var _this = _super.call(this, templateRef, viewContainer) || this;
        _this.templateRef = templateRef;
        _this.viewContainer = viewContainer;
        return _this;
    }
    MobxReactionDirective.prototype.autoDetect = function (view) {
        this.dispose = reaction(this.mobxReaction, function () {
            view['detectChanges']();
        }, { fireImmediately: true });
    };
    MobxReactionDirective.decorators = [
        { type: Directive, args: [{ selector: '[mobxReaction]' },] },
    ];
    /** @nocollapse */
    MobxReactionDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
        { type: ViewContainerRef, },
    ]; };
    MobxReactionDirective.propDecorators = {
        "mobxReaction": [{ type: Input },],
    };
    return MobxReactionDirective;
}(MobxAutorunDirective));
export { MobxReactionDirective };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9ieC1yZWFjdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvZGlyZWN0aXZlcy9tb2J4LXJlYWN0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEMsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7O0lBR25CLHlDQUFvQjtJQUc3RCwrQkFDWSxXQUE2QixFQUM3QixhQUErQjtRQUYzQyxZQUU4QyxrQkFBTSxXQUFXLEVBQUUsYUFBYSxDQUFDLFNBQUc7UUFEdEUsaUJBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLG1CQUFhLEdBQWIsYUFBYSxDQUFrQjs7S0FBdUM7SUFFbEYsMENBQVUsR0FBVixVQUFXLElBQUk7UUFDYixJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO1NBQ3pCLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUMvQjs7Z0JBWkYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFOzs7O2dCQUpILFdBQVc7Z0JBQTdCLGdCQUFnQjs7O2lDQU1qQyxLQUFLOztnQ0FOUjtFQUsyQyxvQkFBb0I7U0FBbEQscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBWaWV3Q29udGFpbmVyUmVmLCBUZW1wbGF0ZVJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHJlYWN0aW9uIH0gZnJvbSAnbW9ieCc7XG5pbXBvcnQge01vYnhBdXRvcnVuRGlyZWN0aXZlfSBmcm9tICcuL21vYngtYXV0b3J1bi5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbW9ieFJlYWN0aW9uXScgfSlcbmV4cG9ydCBjbGFzcyBNb2J4UmVhY3Rpb25EaXJlY3RpdmUgZXh0ZW5kcyBNb2J4QXV0b3J1bkRpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIG1vYnhSZWFjdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJvdGVjdGVkIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYpIHtzdXBlcih0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lcik7IH1cblxuICBhdXRvRGV0ZWN0KHZpZXcpIHtcbiAgICB0aGlzLmRpc3Bvc2UgPSByZWFjdGlvbih0aGlzLm1vYnhSZWFjdGlvbiwgKCkgPT4ge1xuICAgICAgdmlld1snZGV0ZWN0Q2hhbmdlcyddKCk7XG4gICAgfSwgeyBmaXJlSW1tZWRpYXRlbHk6IHRydWUgfSk7XG4gIH1cbn1cbiJdfQ==